[Simplest_form_of_TSN_network]
network = TSN_Network
description = "A simple TSN network without any special module"
sim-time-limit = 5.2s



#####################   TSN_sensorA1   #####################
*.TSN_sensorA1.numApps = 1
*.TSN_sensorA1.app[0].typename = "UdpSourceApp"
*.TSN_sensorA1.app[0].display-name = "TSN_sensorA1"
*.TSN_sensorA1.app[0].io.destAddress = "TSN_serverA"
*.TSN_sensorA1.app[0].io.destPort = 1000
*.TSN_sensorA1.app[0].source.packetLength = 600B
*.TSN_sensorA1.app[0].source.productionInterval = (uniform(200us, 300us) + (replaceUnit(sin(dropUnit(simTime() * 6)), "ms") / 13) - 100us) * 2.5

#####################   TSN_sensorA2   #####################
*.TSN_sensorA2.numApps = 1
*.TSN_sensorA2.app[0].typename = "UdpSourceApp"
*.TSN_sensorA2.app[0].display-name = "TSN_sensorA2"
*.TSN_sensorA2.app[0].io.destAddress = "TSN_serverA"
*.TSN_sensorA2.app[0].io.destPort = 1001
*.TSN_sensorA2.app[0].source.packetLength = 850B
*.TSN_sensorA2.app[0].source.productionInterval = uniform(235us, 242us)

#####################   TSN_sensorB1   #####################
*.TSN_sensorB1.numApps = 1
*.TSN_sensorB1.app[0].typename = "UdpSourceApp"
*.TSN_sensorB1.app[0].display-name = "TSN_sensorB1"
*.TSN_sensorB1.app[0].io.destAddress = "TSN_serverA"
*.TSN_sensorB1.app[0].io.destPort = 1002
*.TSN_sensorB1.app[0].source.packetLength = 600B
*.TSN_sensorB1.app[0].source.productionInterval = (uniform(350us, 450us) + (replaceUnit(sin(dropUnit(simTime() * 6)), "ms") / 13) - 100us) * 2.5

#####################   TSN_sensorB2   #####################
*.TSN_sensorB2.numApps = 1
*.TSN_sensorB2.app[0].typename = "UdpSourceApp"
*.TSN_sensorB2.app[0].display-name = "TSN_sensorB2"
*.TSN_sensorB2.app[0].io.destAddress = "TSN_serverA"
*.TSN_sensorB2.app[0].io.destPort = 1003
*.TSN_sensorB2.app[0].source.packetLength = 550B
*.TSN_sensorB2.app[0].source.productionInterval = uniform(135us, 142us)

#####################   TSN_sensorY   #####################
*.TSN_sensorY.numApps = 1
*.TSN_sensorY.app[0].typename = "UdpSourceApp"
*.TSN_sensorY.app[0].display-name = "TSN_sensorY"
*.TSN_sensorY.app[0].io.destAddress = "TSN_serverA"
*.TSN_sensorY.app[0].io.destPort = 1008
*.TSN_sensorY.app[0].source.packetLength = 850B
*.TSN_sensorY.app[0].source.productionInterval = 200us + replaceUnit(sin(dropUnit(simTime() * 20)), "ms") / 10



#####################   TSN_serverA   #####################
*.TSN_serverA.numApps = 5
*.TSN_serverA.app[*].typename = "UdpSinkApp"
*.TSN_serverA.app[0].io.localPort = 1000
*.TSN_serverA.app[1].io.localPort = 1001
*.TSN_serverA.app[2].io.localPort = 1002
*.TSN_serverA.app[3].io.localPort = 1003
*.TSN_serverA.app[4].io.localPort = 1008



#####################   TSN_sensorC1   #####################
*.TSN_sensorC1.numApps = 1
*.TSN_sensorC1.app[0].typename = "UdpSourceApp"
*.TSN_sensorC1.app[0].display-name = "TSN_sensorC1"
*.TSN_sensorC1.app[0].io.destAddress = "TSN_serverB"
*.TSN_sensorC1.app[0].io.destPort = 1004
*.TSN_sensorC1.app[0].source.packetLength = 600B
*.TSN_sensorC1.app[0].source.productionInterval = (uniform(200us, 300us) + (replaceUnit(sin(dropUnit(simTime() * 6)), "ms") / 13) - 100us) * 2.5

#####################   TSN_sensorC2   #####################
*.TSN_sensorC2.numApps = 1
*.TSN_sensorC2.app[0].typename = "UdpSourceApp"
*.TSN_sensorC2.app[0].display-name = "TSN_sensorC2"
*.TSN_sensorC2.app[0].io.destAddress = "TSN_serverB"
*.TSN_sensorC2.app[0].io.destPort = 1005
*.TSN_sensorC2.app[0].source.packetLength = 850B
*.TSN_sensorC2.app[0].source.productionInterval = uniform(235us, 242us)

#####################   TSN_sensorD1   #####################
*.TSN_sensorD1.numApps = 1
*.TSN_sensorD1.app[0].typename = "UdpSourceApp"
*.TSN_sensorD1.app[0].display-name = "TSN_sensorD1"
*.TSN_sensorD1.app[0].io.destAddress = "TSN_serverB"
*.TSN_sensorD1.app[0].io.destPort = 1006
*.TSN_sensorD1.app[0].source.packetLength = 600B
*.TSN_sensorD1.app[0].source.productionInterval = (uniform(200us, 300us) + (replaceUnit(sin(dropUnit(simTime() * 6)), "ms") / 13) - 100us) * 2.5

#####################   TSN_sensorD2   #####################
*.TSN_sensorD2.numApps = 1
*.TSN_sensorD2.app[0].typename = "UdpSourceApp"
*.TSN_sensorD2.app[0].display-name = "TSN_sensorD2"
*.TSN_sensorD2.app[0].io.destAddress = "TSN_serverB"
*.TSN_sensorD2.app[0].io.destPort = 1007
*.TSN_sensorD2.app[0].source.packetLength = 850B
*.TSN_sensorD2.app[0].source.productionInterval = uniform(235us, 242us)

#####################   TSN_sensorZ   #####################
*.TSN_sensorZ.numApps = 1
*.TSN_sensorZ.app[0].typename = "UdpSourceApp"
*.TSN_sensorZ.app[0].display-name = "TSN_sensorZ"
*.TSN_sensorZ.app[0].io.destAddress = "TSN_serverB"
*.TSN_sensorZ.app[0].io.destPort = 1009
*.TSN_sensorZ.app[0].source.packetLength = 850B
*.TSN_sensorZ.app[0].source.productionInterval = 200us + replaceUnit(sin(dropUnit(simTime() * 10)), "ms") / 20



#####################   TSN_serverB   #####################
*.TSN_serverB.numApps = 5
*.TSN_serverB.app[*].typename = "UdpSinkApp"
*.TSN_serverB.app[0].io.localPort = 1004
*.TSN_serverB.app[1].io.localPort = 1005
*.TSN_serverB.app[2].io.localPort = 1006
*.TSN_serverB.app[3].io.localPort = 1007
*.TSN_serverB.app[4].io.localPort = 1009


#############   enable outgoing streams   #############
*.TSN_sensorA1.hasOutgoingStreams = true
*.TSN_sensorA2.hasOutgoingStreams = true
*.TSN_sensorB1.hasOutgoingStreams = true
*.TSN_sensorB2.hasOutgoingStreams = true
*.TSN_sensorC1.hasOutgoingStreams = true
*.TSN_sensorC2.hasOutgoingStreams = true
*.TSN_sensorD1.hasOutgoingStreams = true
*.TSN_sensorD2.hasOutgoingStreams = true
*.TSN_sensorY.hasOutgoingStreams =  true
*.TSN_sensorZ.hasOutgoingStreams =  true

*.TSN_bridgeA.hasOutgoingStreams = true
*.TSN_bridgeB.hasOutgoingStreams = true
*.TSN_bridgeC.hasOutgoingStreams = true
*.TSN_bridgeD.hasOutgoingStreams = true
# dl
*.TSN_bridgeAB.hasOutgoingStreams = true
*.TSN_bridgeCD.hasOutgoingStreams = true






#######   enable ingress per-stream filtering   #######
*.TSN_bridgeA.hasEgressTrafficFiltering =  true
*.TSN_bridgeB.hasEgressTrafficFiltering =  true
*.TSN_bridgeC.hasEgressTrafficFiltering =  true
*.TSN_bridgeD.hasEgressTrafficFiltering =  true
*.TSN_bridgeAB.hasEgressTrafficFiltering = true
*.TSN_bridgeCD.hasEgressTrafficFiltering = true

*.TSN_bridgeA.hasIngressTrafficFiltering =  true
*.TSN_bridgeB.hasIngressTrafficFiltering =  true
*.TSN_bridgeC.hasIngressTrafficFiltering =  true
*.TSN_bridgeD.hasIngressTrafficFiltering =  true
*.TSN_bridgeAB.hasIngressTrafficFiltering = true
*.TSN_bridgeCD.hasIngressTrafficFiltering = true

# dl
#*.TSN_serverA.hasIngressTrafficFiltering =  true
#*.TSN_serverB.hasIngressTrafficFiltering =  true


[TSN_network_equipped_with_flow_meter]
description = "A TSN network which is equipped with flow meter of PSFP module"
extends = Simplest_form_of_TSN_network



##########   sensor stream identification   ###########
*.TSN_sensorA1.bridging.streamIdentifier.identifier.mapping = [{stream: "best effort", packetFilter: expr(udp.destPort == 1000)}]
*.TSN_sensorA2.bridging.streamIdentifier.identifier.mapping = [{stream: "video",       packetFilter: expr(udp.destPort == 1001)}]
*.TSN_sensorB1.bridging.streamIdentifier.identifier.mapping = [{stream: "best effort", packetFilter: expr(udp.destPort == 1002)}]
*.TSN_sensorB2.bridging.streamIdentifier.identifier.mapping = [{stream: "video",       packetFilter: expr(udp.destPort == 1003)}]
*.TSN_sensorC1.bridging.streamIdentifier.identifier.mapping = [{stream: "best effort", packetFilter: expr(udp.destPort == 1004)}]
*.TSN_sensorC2.bridging.streamIdentifier.identifier.mapping = [{stream: "video",       packetFilter: expr(udp.destPort == 1005)}]
*.TSN_sensorD1.bridging.streamIdentifier.identifier.mapping = [{stream: "best effort", packetFilter: expr(udp.destPort == 1006)}]
*.TSN_sensorD2.bridging.streamIdentifier.identifier.mapping = [{stream: "video",       packetFilter: expr(udp.destPort == 1007)}]
*.TSN_sensorY.bridging.streamIdentifier.identifier.mapping  = [{stream: "voice",       packetFilter: expr(udp.destPort == 1008)}]
*.TSN_sensorZ.bridging.streamIdentifier.identifier.mapping  = [{stream: "voice",       packetFilter: expr(udp.destPort == 1009)}]

*.TSN_bridgeA.bridging.streamIdentifier.identifier.mapping =  [{stream: "best effort", packetFilter: expr(udp.destPort == 1000)}, {stream: "video",       packetFilter: expr(udp.destPort == 1001)}]
*.TSN_bridgeB.bridging.streamIdentifier.identifier.mapping =  [{stream: "best effort", packetFilter: expr(udp.destPort == 1002)}, {stream: "video",       packetFilter: expr(udp.destPort == 1003)}]
*.TSN_bridgeC.bridging.streamIdentifier.identifier.mapping =  [{stream: "best effort", packetFilter: expr(udp.destPort == 1004)}, {stream: "video",       packetFilter: expr(udp.destPort == 1005)}]
*.TSN_bridgeD.bridging.streamIdentifier.identifier.mapping =  [{stream: "best effort", packetFilter: expr(udp.destPort == 1006)}, {stream: "video",       packetFilter: expr(udp.destPort == 1007)}]
*.TSN_bridgeAB.bridging.streamIdentifier.identifier.mapping = [{stream: "best effort", packetFilter: expr(udp.destPort == 1000)}, {stream: "video",       packetFilter: expr(udp.destPort == 1001)},
															   {stream: "best effort", packetFilter: expr(udp.destPort == 1002)}, {stream: "video",       packetFilter: expr(udp.destPort == 1003)}, {stream: "voice",       packetFilter: expr(udp.destPort == 1008)}]
*.TSN_bridgeCD.bridging.streamIdentifier.identifier.mapping = [{stream: "best effort", packetFilter: expr(udp.destPort == 1004)}, {stream: "video",       packetFilter: expr(udp.destPort == 1005)},
															   {stream: "best effort", packetFilter: expr(udp.destPort == 1006)}, {stream: "video",       packetFilter: expr(udp.destPort == 1007)}, {stream: "voice",       packetFilter: expr(udp.destPort == 1009)}]

#############   sensors stream encoding   #############
*.TSN_sensorA1.bridging.streamCoder.encoder.mapping = [{stream: "best effort", pcp: 0}]
*.TSN_sensorA2.bridging.streamCoder.encoder.mapping = [{stream: "video",       pcp: 4}]
*.TSN_sensorB1.bridging.streamCoder.encoder.mapping = [{stream: "best effort", pcp: 0}]
*.TSN_sensorB2.bridging.streamCoder.encoder.mapping = [{stream: "video",       pcp: 4}]
*.TSN_sensorC1.bridging.streamCoder.encoder.mapping = [{stream: "best effort", pcp: 0}]
*.TSN_sensorC2.bridging.streamCoder.encoder.mapping = [{stream: "video",       pcp: 4}]
*.TSN_sensorD1.bridging.streamCoder.encoder.mapping = [{stream: "best effort", pcp: 0}]
*.TSN_sensorD2.bridging.streamCoder.encoder.mapping = [{stream: "video",       pcp: 4}]
*.TSN_sensorY.bridging.streamCoder.encoder.mapping =  [{stream: "voice",       pcp: 5}]
*.TSN_sensorZ.bridging.streamCoder.encoder.mapping =  [{stream: "voice",       pcp: 5}]

*.TSN_bridgeA.bridging.streamCoder.encoder.mapping =  [{stream: "best effort", pcp: 0}, {stream: "video",       pcp: 4}]
*.TSN_bridgeB.bridging.streamCoder.encoder.mapping =  [{stream: "best effort", pcp: 0}, {stream: "video",       pcp: 4}]
*.TSN_bridgeC.bridging.streamCoder.encoder.mapping =  [{stream: "best effort", pcp: 0}, {stream: "video",       pcp: 4}]
*.TSN_bridgeD.bridging.streamCoder.encoder.mapping =  [{stream: "best effort", pcp: 0}, {stream: "video",       pcp: 4}]
# dl
#*.TSN_bridgeAB.bridging.streamCoder.encoder.mapping = [{stream: "best effort", pcp: 0}, {stream: "video",       pcp: 4}, {stream: "voice",       pcp: 5}]
#*.TSN_bridgeCD.bridging.streamCoder.encoder.mapping = [{stream: "best effort", pcp: 0}, {stream: "video",       pcp: 4}, {stream: "voice",       pcp: 5}]


#################   stream decoding   #################
*.TSN_bridgeA.bridging.streamCoder.decoder.mapping =  [{pcp: 0, stream: "best effort"}, {pcp: 4, stream: "video"}]
*.TSN_bridgeB.bridging.streamCoder.decoder.mapping =  [{pcp: 0, stream: "best effort"}, {pcp: 4, stream: "video"}]
*.TSN_bridgeC.bridging.streamCoder.decoder.mapping =  [{pcp: 0, stream: "best effort"}, {pcp: 4, stream: "video"}]
*.TSN_bridgeD.bridging.streamCoder.decoder.mapping =  [{pcp: 0, stream: "best effort"}, {pcp: 4, stream: "video"}]
*.TSN_bridgeAB.bridging.streamCoder.decoder.mapping = [{pcp: 0, stream: "best effort"}, {pcp: 4, stream: "video"}, {pcp: 5, stream: "voice"}]
*.TSN_bridgeCD.bridging.streamCoder.decoder.mapping = [{pcp: 0, stream: "best effort"}, {pcp: 4, stream: "video"}, {pcp: 5, stream: "voice"}]


##############   per-stream filtering   ###############
*.TSN_bridgeA.bridging.streamFilter.ingress.numStreams = 2
*.TSN_bridgeA.bridging.streamFilter.ingress.classifier.mapping = {"best effort": 0, "video": 1}
*.TSN_bridgeA.bridging.streamFilter.ingress.meter[0].display-name = "best effort"
*.TSN_bridgeA.bridging.streamFilter.ingress.meter[1].display-name = "video"
*.TSN_bridgeA.bridging.streamFilter.ingress.meter[*].typename = "SingleRateTwoColorMeter"
*.TSN_bridgeA.bridging.streamFilter.ingress.meter[0].committedInformationRate = 15Mbps
*.TSN_bridgeA.bridging.streamFilter.ingress.meter[1].committedInformationRate = 20Mbps
*.TSN_bridgeA.bridging.streamFilter.ingress.meter[0].committedBurstSize = 10kB
*.TSN_bridgeA.bridging.streamFilter.ingress.meter[1].committedBurstSize = 5kB

*.TSN_bridgeB.bridging.streamFilter.ingress.numStreams = 2
*.TSN_bridgeB.bridging.streamFilter.ingress.classifier.mapping = {"best effort": 0, "video": 1}
*.TSN_bridgeB.bridging.streamFilter.ingress.meter[0].display-name = "best effort"
*.TSN_bridgeB.bridging.streamFilter.ingress.meter[1].display-name = "video"
*.TSN_bridgeB.bridging.streamFilter.ingress.meter[*].typename = "SingleRateTwoColorMeter"
*.TSN_bridgeB.bridging.streamFilter.ingress.meter[0].committedInformationRate = 15Mbps
*.TSN_bridgeB.bridging.streamFilter.ingress.meter[1].committedInformationRate = 20Mbps
*.TSN_bridgeB.bridging.streamFilter.ingress.meter[0].committedBurstSize = 10kB
*.TSN_bridgeB.bridging.streamFilter.ingress.meter[1].committedBurstSize = 5kB

*.TSN_bridgeC.bridging.streamFilter.ingress.numStreams = 2
*.TSN_bridgeC.bridging.streamFilter.ingress.classifier.mapping = {"best effort": 0, "video": 1}
*.TSN_bridgeC.bridging.streamFilter.ingress.meter[0].display-name = "best effort"
*.TSN_bridgeC.bridging.streamFilter.ingress.meter[1].display-name = "video"
*.TSN_bridgeC.bridging.streamFilter.ingress.meter[*].typename = "SingleRateTwoColorMeter"
*.TSN_bridgeC.bridging.streamFilter.ingress.meter[0].committedInformationRate = 15Mbps
*.TSN_bridgeC.bridging.streamFilter.ingress.meter[1].committedInformationRate = 20Mbps
*.TSN_bridgeC.bridging.streamFilter.ingress.meter[0].committedBurstSize = 10kB
*.TSN_bridgeC.bridging.streamFilter.ingress.meter[1].committedBurstSize = 5kB

*.TSN_bridgeD.bridging.streamFilter.ingress.numStreams = 2
*.TSN_bridgeD.bridging.streamFilter.ingress.classifier.mapping = {"best effort": 0, "video": 1}
*.TSN_bridgeD.bridging.streamFilter.ingress.meter[0].display-name = "best effort"
*.TSN_bridgeD.bridging.streamFilter.ingress.meter[1].display-name = "video"
*.TSN_bridgeD.bridging.streamFilter.ingress.meter[*].typename = "SingleRateTwoColorMeter"
*.TSN_bridgeD.bridging.streamFilter.ingress.meter[0].committedInformationRate = 15Mbps
*.TSN_bridgeD.bridging.streamFilter.ingress.meter[1].committedInformationRate = 20Mbps
*.TSN_bridgeD.bridging.streamFilter.ingress.meter[0].committedBurstSize = 10kB
*.TSN_bridgeD.bridging.streamFilter.ingress.meter[1].committedBurstSize = 5kB

*.TSN_bridgeAB.bridging.streamFilter.ingress.numStreams = 3
*.TSN_bridgeAB.bridging.streamFilter.ingress.classifier.mapping = {"best effort": 0, "video": 1, "voice": 2}
*.TSN_bridgeAB.bridging.streamFilter.ingress.meter[0].display-name = "best effort"
*.TSN_bridgeAB.bridging.streamFilter.ingress.meter[1].display-name = "video"
*.TSN_bridgeAB.bridging.streamFilter.ingress.meter[2].display-name = "voice"
*.TSN_bridgeAB.bridging.streamFilter.ingress.meter[*].typename = "SingleRateTwoColorMeter"
*.TSN_bridgeAB.bridging.streamFilter.ingress.meter[0].committedInformationRate = 20Mbps
*.TSN_bridgeAB.bridging.streamFilter.ingress.meter[1].committedInformationRate = 35Mbps
*.TSN_bridgeAB.bridging.streamFilter.ingress.meter[2].committedInformationRate = 30Mbps
*.TSN_bridgeAB.bridging.streamFilter.ingress.meter[0].committedBurstSize = 10kB
*.TSN_bridgeAB.bridging.streamFilter.ingress.meter[1].committedBurstSize = 5kB
*.TSN_bridgeAB.bridging.streamFilter.ingress.meter[2].committedBurstSize = 5kB


*.TSN_bridgeCD.bridging.streamFilter.ingress.numStreams = 3
*.TSN_bridgeCD.bridging.streamFilter.ingress.classifier.mapping = {"best effort": 0, "video": 1, "voice": 2}
*.TSN_bridgeCD.bridging.streamFilter.ingress.meter[0].display-name = "best effort"
*.TSN_bridgeCD.bridging.streamFilter.ingress.meter[1].display-name = "video"
*.TSN_bridgeCD.bridging.streamFilter.ingress.meter[2].display-name = "voice"
*.TSN_bridgeCD.bridging.streamFilter.ingress.meter[*].typename = "SingleRateTwoColorMeter"
*.TSN_bridgeCD.bridging.streamFilter.ingress.meter[0].committedInformationRate = 10Mbps
*.TSN_bridgeCD.bridging.streamFilter.ingress.meter[1].committedInformationRate = 50Mbps
*.TSN_bridgeCD.bridging.streamFilter.ingress.meter[2].committedInformationRate = 40Mbps
*.TSN_bridgeCD.bridging.streamFilter.ingress.meter[0].committedBurstSize = 10kB
*.TSN_bridgeCD.bridging.streamFilter.ingress.meter[1].committedBurstSize = 5kB
*.TSN_bridgeCD.bridging.streamFilter.ingress.meter[2].committedBurstSize = 5kB



[TSN_network_equipped_with_flow_meter_and_stream_gate]
description = "A TSN network which is equipped with flow meter and stream gate of PSFP module"
extends = TSN_network_equipped_with_flow_meter

*.TSN_bridgeAB.bridging.streamFilter.ingress.numGates = 3
*.TSN_bridgeAB.bridging.streamFilter.ingress.gate[*].typename = "PacketGate"
*.TSN_bridgeAB.bridging.streamFilter.ingress.gate[0].display-name = "best effort"
*.TSN_bridgeAB.bridging.streamFilter.ingress.gate[1].display-name = "video"
*.TSN_bridgeAB.bridging.streamFilter.ingress.gate[2].display-name = "voice"
*.TSN_bridgeAB.bridging.streamFilter.ingress.gate[*].initiallyOpen = true
*.TSN_bridgeAB.bridging.streamFilter.ingress.gate[*].closeTime = 1.0s
*.TSN_bridgeAB.bridging.streamFilter.ingress.gate[*].openTime = 1.0s
